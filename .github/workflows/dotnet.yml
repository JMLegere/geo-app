---
# yamllint disable rule:line-length
name: .NET

'on':
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET 6
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.0.x

      - name: Restore dependencies
        run: dotnet restore Tests/GeoApp.Tests/GeoApp.Tests.csproj

      - name: Build tests
        run: dotnet build Tests/GeoApp.Tests/GeoApp.Tests.csproj --no-restore

      - name: Run tests
        run: |
          dotnet test Tests/GeoApp.Tests/GeoApp.Tests.csproj \
            --no-build --verbosity minimal

  unity-build:
    needs: test
    runs-on: ubuntu-latest
    environment: 'Unity Secrets'
    env:
      DOCKER_CLI_DEBUG: '1'
      BUILDKIT_PROGRESS: plain
    steps:
      - name: Check Unity login secrets
        env:
          EMAIL: ${{ secrets.UNITY_EMAIL }}
          PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        run: |
          if [ -z "$EMAIL" ] || [ -z "$PASSWORD" ]; then
            echo 'UNITY_EMAIL and UNITY_PASSWORD secrets are required' >&2
            exit 1
          fi
          echo "UNITY_EMAIL length: ${#EMAIL}"
          echo "UNITY_PASSWORD length: ${#PASSWORD}"

      - name: Check Unity license secrets
        env:
          LICENSE: ${{ secrets.UNITY_LICENSE }}
          SERIAL: ${{ secrets.UNITY_SERIAL }}
        run: |
          if [ -z "$LICENSE" ] && [ -z "$SERIAL" ]; then
            echo 'Provide UNITY_LICENSE or UNITY_SERIAL for activation' >&2
            exit 1
          fi
          echo "UNITY_LICENSE length: ${#LICENSE}"
          license_hash=$(echo -n "$LICENSE" | sha1sum | cut -d" " -f1)
          echo "UNITY_LICENSE sha1: $license_hash"
          echo "UNITY_SERIAL length: ${#SERIAL}"
          if [ -n "$SERIAL" ]; then
            serial_hash=$(echo -n "$SERIAL" | sha1sum | cut -d" " -f1)
            echo "UNITY_SERIAL sha1: $serial_hash"
          fi

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract Unity version
        id: unity
        run: |
          raw=$(grep m_EditorVersion ProjectSettings/ProjectVersion.txt | cut -d' ' -f2)
          if [[ "$raw" =~ ^[0-9]+\.[0-9]+\.[0-9]+[a-z][0-9]+$ ]]; then
            version="$raw"
          else
            echo "Unrecognized Unity version '$raw', using 2023.1.0f1" >&2
            version="2023.1.0f1"
          fi
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('**/Packages/packages-lock.json') }}
          restore-keys: |
            Library-


      - name: Activate Unity
        uses: game-ci/unity-activate@v2
        with:
          unityVersion: ${{ steps.unity.outputs.version }}
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          DOCKER_CLI_DEBUG: 1
          BUILDKIT_PROGRESS: plain

      - name: Build Unity project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          DOCKER_CLI_DEBUG: 1
          BUILDKIT_PROGRESS: plain
        with:
          projectPath: .
          unityVersion: ${{ steps.unity.outputs.version }}
          targetPlatform: StandaloneLinux64

      - name: Upload build
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: Build
          path: build
