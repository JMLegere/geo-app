name: ".NET"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3

      - name: "Setup .NET 6"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "6.0.x"

      - name: "Restore dependencies"
        run: dotnet restore Tests/GeoApp.Tests/GeoApp.Tests.csproj

      - name: "Build tests"
        run: dotnet build Tests/GeoApp.Tests/GeoApp.Tests.csproj --no-restore

      - name: "Run tests"
        run: dotnet test Tests/GeoApp.Tests/GeoApp.Tests.csproj --no-build --verbosity minimal

  unity-build:
    needs: test
    runs-on: ubuntu-latest
    environment: Unity Secrets
    env:
      UNITY_VERSION: "6000.0.50f1"
      DOCKER_CLI_DEBUG: "1"
      BUILDKIT_PROGRESS: plain
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3

      - name: "Check Unity login secrets"
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        run: |
          if [ -z "$UNITY_EMAIL" ] || [ -z "$UNITY_PASSWORD" ]; then
            echo "UNITY_EMAIL and UNITY_PASSWORD secrets are required" >&2
            exit 1
          fi
          echo "UNITY_EMAIL length: ${#UNITY_EMAIL}"
          echo "UNITY_PASSWORD length: ${#UNITY_PASSWORD}"

      - name: "Check and decode Unity license"
        id: license
        env:
          UNITY_LICENSE_B64: ${{ secrets.UNITY_LICENSE_B64 }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        run: |
          if [ -z "$UNITY_LICENSE_B64" ] && [ -z "$UNITY_SERIAL" ]; then
            echo "Provide UNITY_LICENSE_B64 or UNITY_SERIAL for activation" >&2
            exit 1
          fi

          license=""
          if [ -n "$UNITY_LICENSE_B64" ]; then
            echo "Decoding base64 license..."
            echo "$UNITY_LICENSE_B64" | base64 --decode > license.ulf
            license=$(cat license.ulf)
            echo "UNITY_LICENSE<<EOF" >> $GITHUB_ENV
            echo "$license" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

          echo "UNITY_SERIAL=$UNITY_SERIAL" >> $GITHUB_ENV

          echo "UNITY_LICENSE length: ${#license}"
          if [ -n "$license" ]; then
            license_hash=$(echo -n "$license" | sha1sum | cut -d" " -f1)
            echo "UNITY_LICENSE sha1: $license_hash"
          fi
          echo "UNITY_SERIAL length: ${#UNITY_SERIAL}"

      - name: "Cache Library"
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('**/Packages/packages-lock.json') }}
          restore-keys: |
            Library-

      - name: "Build project"
        uses: game-ci/unity-builder@v2
        with:
          unityVersion: ${{ env.UNITY_VERSION }}
          targetPlatform: StandaloneLinux64
        env:
          UNITY_LICENSE: ${{ env.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
